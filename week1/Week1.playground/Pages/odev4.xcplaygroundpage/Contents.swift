// Euler Project Archives - ID:1 - Multiples of 3 or 5
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

// Find the sum of all the multiples of 3 or 5 below 1000.

import Foundation
import UIKit

func findThreeAndFive(x: Int, y: Int) -> Int{
    var sum: Int = 0
    var i: Int = 1
    while i < 1000{
        if i % x == 0 || i % y == 0{
            sum += i
        }
        i += 1
    }
    
    return sum
}

//var result: Int = findThreeAndFive(x: 3, y: 5)
//print(result)



// Euler Project Archives - ID:2 - Even Fibonacci numbers
/*
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

func sumEvenFiboNumbers() -> CLong{
    var x: CLong = 1
    var y: CLong = 1
    var sum: CLong = 0
    while y < 4000000{
        (x, y) = (y, x+y)
        
        if y % 2 == 0{
            sum += y
        }
    }
    return sum
}

//var sum: CLong = sumEvenFiboNumbers()
//print(sum)


// Euler Project Archives - ID:3 - Largest prime factor
/*
 The prime factors of 13195 are 5, 7, 13 and 29.

 What is the largest prime factor of the number 600851475143 ?
 */
// number.squareRoot()

func findMaxPrime(number: Int) -> Int{
    let number = number // 600851475143
    var i = 3
    var lastPrime: Int = 2
    while i < number / 2{
        var j = i - 1
        var isPrime = true
        while j >= 2{
            if i % j == 0{
                isPrime = false
                break
            }
            j -= 1
        }
        if isPrime{
            if number % i == 0{
                lastPrime = i
            }
            isPrime = false
        }
        i += 1
    }
    return lastPrime
}

//var maxPrime: Int = findMaxPrime(number: 600851475143)
//print(maxPrime)


struct MATH {
    var x: String
    func sum(_ x: Int, _ y: Int) -> Int {
        x + y
    }
}

final class cMATH: UIViewController {
    var x: String = ""
    
    fileprivate var abov: String = "abooov"
    private var abov2: String = "aboooov 2"
    
    func sum(_ x: Int, _ y: Int) -> Int {
        x + y
    }
    
    deinit {
        print("Goodbye")
    }
}

var cMath = cMATH()
cMath.abov

//var math1 = MATH(x: "Hello")
//var math2 = math1
//math1.x = "World"
//math2.x = "Hello"
//print(math1.x)
//print(math2.x)
//
//
//var cMath1 = cMATH()
//var cMath2 = cMath1
//cMath1.x = "Hello"
//cMath2.x = "World"
//cMath1.x = "Abidik"
//
//print(cMath1.x)
//print(cMath2.x)

struct Human
{
    private var name : String
   
    init(name: String)
    {
      self.name = name
    }
   
    mutating func changeName(newName: String)
    {
       self.name = newName
    }
    
    func showName()
    {
       print(name)
    }
}


var ohuman = Human(name: "kuyt")
ohuman.showName()
ohuman.changeName(newName: "alex")// let olan ohuman nesnesinin property'sinde değişiklik yapamayız. hata verir. Çünkü Struct Value Type'dır. Aynı örnek class olsaydı, çalışırdı;

var list: [Any] = [Any]()
list.append(4)
list.append(1)
list.append(3)
list.append(0)
list.append(9)

print(list)

var setDizi = Set<Int>()
setDizi.insert(2)
setDizi.insert(1)
setDizi.insert(343)
setDizi.insert(34)

print(setDizi)
setDizi.first


enum BinanceInterval: String {
    case min1 = "1m"
    case min3 = "3m"
    case min5 = "5m"
}


BinanceInterval.min1
BinanceInterval.min1.rawValue

print(BinanceInterval.min1.rawValue)
